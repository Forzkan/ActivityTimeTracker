    
plugins {
  // Apply the java-library plugin to add support for Java Library
  id 'java-library'
  id 'application'
  id 'eclipse' // (to generate Eclipse project files)
  id 'org.openjfx.javafxplugin' version '0.0.8'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {

	runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:win"
	runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:linux"
	runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:mac"
	implementation 'org.controlsfx:controlsfx:11.0.1'
	
	// Icons
    compile 'org.kordamp.ikonli:ikonli-javafx:2.4.0'
	compile 'org.kordamp.ikonli:ikonli-dashicons-pack:2.4.0'
	
	// DATABASE Apache Derby
	// https://mvnrepository.com/artifact/org.apache.derby/derby
	//testCompile group: 'org.apache.derby', name: 'derby', version: '10.15.2.0'
	// For now its SQLite
	compile files('external/java/sqlite-jdbc-3.27.2.1.jar')
	// My own little library with javafx components.
	compile files('external/java/components4jfx-0.1.1.jar')
	
	
	// TEST
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
	testCompile 'org.mockito:mockito-core:3.0.0'
    
    // TestFX - Used with JUnit for running unittests on GUI components, simulating real user interactions with the software.
    testCompile "org.testfx:testfx-core:4.0.+"
	testCompile "org.testfx:testfx-junit:4.0.+"
    
    // LOGGING 
    // Log4J2, used to logg, and store to file, different levels of information from the software during runtime.
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.1'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.1'
}

javafx {
    version = "14"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

run {
    if (javafx.platform.classifier == 'win') {
        // Temporal fix for Eclipse with JDK 1.8 and Windows 
        systemProperty "java.library.path", "C:\tmp"
    }
}

test {
    useJUnitPlatform()
    testLogging {
		events "passed", "skipped", "failed"
	}
}
jar {
    manifest {
        attributes 'Main-Class': 'ActivityTracker.Launcher'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

mainClassName = 'ActivityTracker.Main'